{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Danie\\\\Desktop\\\\Apps\\\\arabic-to-english\\\\src\\\\pages\\\\Reading\\\\ReadingExercise.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Introduction from \"./Introduction\";\nimport Exercise from \"./Exercise\";\nimport { saveExerciseData } from \"./ExerciseData\";\nimport { startExercise, calculateScore } from \"./ExerciseLogic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ReadingExercise() {\n  _s();\n  const [text, setText] = useState(\"\");\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [submitted, setSubmitted] = useState(false);\n  const handleAnswerChange = (value, index) => {\n    const newAnswers = [...answers];\n    newAnswers[index] = value;\n    setAnswers(newAnswers);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (submitted) {\n      return;\n    }\n    const tempScore = calculateScore(questions, answers);\n    const percentage = Math.round(tempScore / questions.length * 100);\n    setScore(prevScore => prevScore + tempScore);\n    setSubmitted(true);\n    saveExerciseData(text, questions, answers, percentage);\n  };\n  const resetAnswers = () => {\n    setAnswers(new Array(questions.length).fill(\"\"));\n    setSubmitted(false);\n  };\n  const isSubmitDisabled = answers.includes(\"\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reading Comprehension Exercise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), text ? /*#__PURE__*/_jsxDEV(Exercise, {\n      text: text,\n      questions: questions,\n      answers: answers,\n      submitted: submitted,\n      handleAnswerChange: handleAnswerChange,\n      handleSubmit: handleSubmit,\n      isSubmitDisabled: isSubmitDisabled,\n      score: score,\n      resetAnswers: resetAnswers,\n      startExercise: () => startExercise(score, setText, setQuestions, setAnswers, setSubmitted)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Introduction, {\n      startExercise: () => startExercise(score, setText, setQuestions, setAnswers, setSubmitted)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(ReadingExercise, \"PrNl7QnS9LUp67uQwUOBNuP+4ik=\");\n_c = ReadingExercise;\nexport default ReadingExercise;\nvar _c;\n$RefreshReg$(_c, \"ReadingExercise\");","map":{"version":3,"names":["React","useState","Introduction","Exercise","saveExerciseData","startExercise","calculateScore","jsxDEV","_jsxDEV","ReadingExercise","_s","text","setText","questions","setQuestions","answers","setAnswers","score","setScore","submitted","setSubmitted","handleAnswerChange","value","index","newAnswers","handleSubmit","e","preventDefault","tempScore","percentage","Math","round","length","prevScore","resetAnswers","Array","fill","isSubmitDisabled","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Danie/Desktop/Apps/arabic-to-english/src/pages/Reading/ReadingExercise.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Introduction from \"./Introduction\";\r\nimport Exercise from \"./Exercise\";\r\nimport { saveExerciseData } from \"./ExerciseData\";\r\n\r\nimport { startExercise, calculateScore } from \"./ExerciseLogic\";\r\n\r\nfunction ReadingExercise() {\r\n  const [text, setText] = useState(\"\");\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const handleAnswerChange = (value, index) => {\r\n    const newAnswers = [...answers];\r\n    newAnswers[index] = value;\r\n    setAnswers(newAnswers);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (submitted) {\r\n      return;\r\n    }\r\n\r\n    const tempScore = calculateScore(questions, answers);\r\n    const percentage = Math.round((tempScore / questions.length) * 100);\r\n\r\n    setScore((prevScore) => prevScore + tempScore);\r\n    setSubmitted(true);\r\n    saveExerciseData(text, questions, answers, percentage);\r\n  };\r\n\r\n  const resetAnswers = () => {\r\n    setAnswers(new Array(questions.length).fill(\"\"));\r\n    setSubmitted(false);\r\n  };\r\n\r\n  const isSubmitDisabled = answers.includes(\"\");\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Reading Comprehension Exercise</h1>\r\n\r\n      {text ? (\r\n        <Exercise\r\n          text={text}\r\n          questions={questions}\r\n          answers={answers}\r\n          submitted={submitted}\r\n          handleAnswerChange={handleAnswerChange}\r\n          handleSubmit={handleSubmit}\r\n          isSubmitDisabled={isSubmitDisabled}\r\n          score={score}\r\n          resetAnswers={resetAnswers}\r\n          startExercise={() =>\r\n            startExercise(\r\n              score,\r\n              setText,\r\n              setQuestions,\r\n              setAnswers,\r\n              setSubmitted\r\n            )\r\n          }\r\n        />\r\n      ) : (\r\n        <Introduction\r\n          startExercise={() =>\r\n            startExercise(\r\n              score,\r\n              setText,\r\n              setQuestions,\r\n              setAnswers,\r\n              setSubmitted\r\n            )\r\n          }\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReadingExercise;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
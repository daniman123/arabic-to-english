{"ast":null,"code":"class JSONData {\n  constructor(data) {\n    this.data = this.removeDuplicateTexts(data);\n  }\n  removeDuplicateTexts(data) {\n    const uniqueTexts = new Set();\n    const newData = [];\n    for (let i = 0; i < data.length; i++) {\n      const section = data[i];\n      if (section.text && !uniqueTexts.has(section.text)) {\n        newData.push(section);\n        uniqueTexts.add(section.text);\n      } else if (section.text) {\n        console.log(`Duplicate text section found: \"${section.text}\"`);\n      } else if (section.questions) {\n        newData.push(section);\n      }\n    }\n    // console.log(newData);\n    return newData;\n  }\n  getQuestions() {\n    const questions = [];\n    for (let i = 0; i < this.data.length; i++) {\n      const section = this.data[i];\n      if (section.questions) {\n        questions.push(...section.questions);\n      }\n    }\n    return questions;\n  }\n  getTexts() {\n    const texts = [];\n    for (let i = 0; i < this.data.length; i++) {\n      const section = this.data[i];\n      if (section.text) {\n        texts.push(section.text);\n      }\n    }\n    return texts;\n  }\n  getTextsLength() {\n    const lengths = [];\n    for (let i = 0; i < this.data.length; i++) {\n      const section = this.data[i];\n      if (section.text) {\n        lengths.push(section.text.length);\n      }\n    }\n    return lengths;\n  }\n  getTextsLengthRanking() {\n    const lengths = this.getTextsLength();\n    const sortedLengths = lengths.slice().sort((a, b) => b - a);\n    const ranking = [];\n    for (let i = 0; i < sortedLengths.length; i++) {\n      const length = sortedLengths[i];\n      const index = lengths.indexOf(length);\n      const text = this.data[index].text;\n      ranking.push({\n        text,\n        length\n      });\n    }\n    return ranking;\n  }\n  getTextsByDifficultyAndLength(data, difficulty) {\n    let minLength, maxLength;\n    switch (difficulty) {\n      case \"beginner\":\n        minLength = 0;\n        maxLength = 99;\n        break;\n      case \"intermediate\":\n        minLength = 100;\n        maxLength = 299;\n        break;\n      case \"advanced\":\n        minLength = 300;\n        maxLength = Infinity;\n        break;\n      default:\n        return null;\n    }\n    return data.filter(item => item.text.length >= minLength && item.text.length <= maxLength);\n  }\n}\nexport default JSONData;","map":{"version":3,"names":["JSONData","constructor","data","removeDuplicateTexts","uniqueTexts","Set","newData","i","length","section","text","has","push","add","console","log","questions","getQuestions","getTexts","texts","getTextsLength","lengths","getTextsLengthRanking","sortedLengths","slice","sort","a","b","ranking","index","indexOf","getTextsByDifficultyAndLength","difficulty","minLength","maxLength","Infinity","filter","item"],"sources":["C:/Users/Danie/Desktop/Apps/arabic-to-english/src/functions/exerciseLevelTracker.js"],"sourcesContent":["class JSONData {\r\n  constructor(data) {\r\n    this.data = this.removeDuplicateTexts(data);\r\n  }\r\n\r\n  removeDuplicateTexts(data) {\r\n    const uniqueTexts = new Set();\r\n    const newData = [];\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      const section = data[i];\r\n\r\n      if (section.text && !uniqueTexts.has(section.text)) {\r\n        newData.push(section);\r\n        uniqueTexts.add(section.text);\r\n      } else if (section.text) {\r\n        console.log(`Duplicate text section found: \"${section.text}\"`);\r\n      } else if (section.questions) {\r\n        newData.push(section);\r\n      }\r\n    }\r\n    // console.log(newData);\r\n    return newData;\r\n  }\r\n\r\n  getQuestions() {\r\n    const questions = [];\r\n\r\n    for (let i = 0; i < this.data.length; i++) {\r\n      const section = this.data[i];\r\n\r\n      if (section.questions) {\r\n        questions.push(...section.questions);\r\n      }\r\n    }\r\n\r\n    return questions;\r\n  }\r\n\r\n  getTexts() {\r\n    const texts = [];\r\n\r\n    for (let i = 0; i < this.data.length; i++) {\r\n      const section = this.data[i];\r\n\r\n      if (section.text) {\r\n        texts.push(section.text);\r\n      }\r\n    }\r\n\r\n    return texts;\r\n  }\r\n\r\n  getTextsLength() {\r\n    const lengths = [];\r\n\r\n    for (let i = 0; i < this.data.length; i++) {\r\n      const section = this.data[i];\r\n\r\n      if (section.text) {\r\n        lengths.push(section.text.length);\r\n      }\r\n    }\r\n\r\n    return lengths;\r\n  }\r\n\r\n  getTextsLengthRanking() {\r\n    const lengths = this.getTextsLength();\r\n    const sortedLengths = lengths.slice().sort((a, b) => b - a);\r\n    const ranking = [];\r\n\r\n    for (let i = 0; i < sortedLengths.length; i++) {\r\n      const length = sortedLengths[i];\r\n      const index = lengths.indexOf(length);\r\n      const text = this.data[index].text;\r\n      ranking.push({ text, length });\r\n    }\r\n\r\n    return ranking;\r\n  }\r\n\r\n  getTextsByDifficultyAndLength(data, difficulty) {\r\n    let minLength, maxLength;\r\n    switch (difficulty) {\r\n      case \"beginner\":\r\n        minLength = 0;\r\n        maxLength = 99;\r\n        break;\r\n      case \"intermediate\":\r\n        minLength = 100;\r\n        maxLength = 299;\r\n        break;\r\n      case \"advanced\":\r\n        minLength = 300;\r\n        maxLength = Infinity;\r\n        break;\r\n      default:\r\n        return null;\r\n    }\r\n    return data.filter(\r\n      (item) => item.text.length >= minLength && item.text.length <= maxLength\r\n    );\r\n  }\r\n}\r\nexport default JSONData;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"class JSONData {\n  constructor(data) {\n    this.data = this.removeDuplicateTexts(data);\n  }\n  removeDuplicateTexts(data) {\n    const texts = data.map(section => section.text);\n    const uniqueTexts = [...new Set(texts)];\n    const newData = [];\n    for (let i = 0; i < data.length; i++) {\n      const section = data[i];\n      if (section.text && uniqueTexts.includes(section.text)) {\n        newData.push(section);\n        uniqueTexts.splice(uniqueTexts.indexOf(section.text), 1);\n      } else if (section.questions) {\n        newData.push(section);\n      }\n    }\n    return newData;\n  }\n  getQuestions() {\n    const questions = [];\n    for (let i = 0; i < this.data.length; i++) {\n      const section = this.data[i];\n      if (section.questions) {\n        questions.push(...section.questions);\n      }\n    }\n    return questions;\n  }\n  getTexts() {\n    const texts = [];\n    for (let i = 0; i < this.data.length; i++) {\n      const section = this.data[i];\n      if (section.text) {\n        texts.push(section.text);\n      }\n    }\n    return texts;\n  }\n  getTextsLength() {\n    const lengths = [];\n    for (let i = 0; i < this.data.length; i++) {\n      const section = this.data[i];\n      if (section.text) {\n        lengths.push(section.text.length);\n      }\n    }\n    return lengths;\n  }\n  getTextsLengthRanking() {\n    const lengths = this.getTextsLength();\n    const sortedLengths = lengths.slice().sort((a, b) => b - a);\n    const ranking = [];\n    for (let i = 0; i < sortedLengths.length; i++) {\n      const length = sortedLengths[i];\n      const index = lengths.indexOf(length);\n      const text = this.data[index].text;\n      ranking.push({\n        text,\n        length\n      });\n    }\n    return ranking;\n  }\n}\nexport default JSONData;\n\n// const jsonDataObj = new JSONData(jsonData);\n//   console.log(jsonDataObj.getQuestions()); // prints an array of all questions in the JSON data\n//   console.log(jsonDataObj.getTexts()); // prints an array of all text sections in the JSON data\n//   console.log(jsonDataObj.getTextsLength()); // prints an array of the length of each \"text\" section in the JSON data\n// console.log(jsonDataObj.getTextsLengthRanking()); // prints an array of objects containing the \"text\" and length of each section, ranked from high to low","map":{"version":3,"names":["JSONData","constructor","data","removeDuplicateTexts","texts","map","section","text","uniqueTexts","Set","newData","i","length","includes","push","splice","indexOf","questions","getQuestions","getTexts","getTextsLength","lengths","getTextsLengthRanking","sortedLengths","slice","sort","a","b","ranking","index"],"sources":["C:/Users/Danie/Desktop/Apps/arabic-to-english/src/functions/exerciseLevelTracker.js"],"sourcesContent":["class JSONData {\r\n  constructor(data) {\r\n    this.data = this.removeDuplicateTexts(data);\r\n  }\r\n\r\n  removeDuplicateTexts(data) {\r\n    const texts = data.map((section) => section.text);\r\n    const uniqueTexts = [...new Set(texts)];\r\n    const newData = [];\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      const section = data[i];\r\n\r\n      if (section.text && uniqueTexts.includes(section.text)) {\r\n        newData.push(section);\r\n        uniqueTexts.splice(uniqueTexts.indexOf(section.text), 1);\r\n      } else if (section.questions) {\r\n        newData.push(section);\r\n      }\r\n    }\r\n\r\n    return newData;\r\n  }\r\n\r\n  getQuestions() {\r\n    const questions = [];\r\n\r\n    for (let i = 0; i < this.data.length; i++) {\r\n      const section = this.data[i];\r\n\r\n      if (section.questions) {\r\n        questions.push(...section.questions);\r\n      }\r\n    }\r\n\r\n    return questions;\r\n  }\r\n\r\n  getTexts() {\r\n    const texts = [];\r\n\r\n    for (let i = 0; i < this.data.length; i++) {\r\n      const section = this.data[i];\r\n\r\n      if (section.text) {\r\n        texts.push(section.text);\r\n      }\r\n    }\r\n\r\n    return texts;\r\n  }\r\n\r\n  getTextsLength() {\r\n    const lengths = [];\r\n\r\n    for (let i = 0; i < this.data.length; i++) {\r\n      const section = this.data[i];\r\n\r\n      if (section.text) {\r\n        lengths.push(section.text.length);\r\n      }\r\n    }\r\n\r\n    return lengths;\r\n  }\r\n\r\n  getTextsLengthRanking() {\r\n    const lengths = this.getTextsLength();\r\n    const sortedLengths = lengths.slice().sort((a, b) => b - a);\r\n    const ranking = [];\r\n\r\n    for (let i = 0; i < sortedLengths.length; i++) {\r\n      const length = sortedLengths[i];\r\n      const index = lengths.indexOf(length);\r\n      const text = this.data[index].text;\r\n      ranking.push({ text, length });\r\n    }\r\n\r\n    return ranking;\r\n  }\r\n}\r\n\r\nexport default JSONData;\r\n\r\n// const jsonDataObj = new JSONData(jsonData);\r\n//   console.log(jsonDataObj.getQuestions()); // prints an array of all questions in the JSON data\r\n//   console.log(jsonDataObj.getTexts()); // prints an array of all text sections in the JSON data\r\n//   console.log(jsonDataObj.getTextsLength()); // prints an array of the length of each \"text\" section in the JSON data\r\n// console.log(jsonDataObj.getTextsLengthRanking()); // prints an array of objects containing the \"text\" and length of each section, ranked from high to low\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}